---
interface Props {
  dataTarget: string;
  contentId: string;
  question: string;
  answer: string;
}

const {dataTarget, question, answer, contentId} = Astro.props
---



    <div class="border border-gray-200 rounded-md">
      <button
        class="accordion-header w-full p-4 text-left flex justify-between items-center"
        data-target={dataTarget}
      >
        <span>{question}</span>
        <svg
          class="accordion-icon w-6 h-6 transform transition-transform"
          xmlns="http://www.w3.org/2000/svg"
          fill="none"
          viewBox="0 0 24 24"
          stroke="currentColor"
        >
          <path
            stroke-linecap="round"
            stroke-linejoin="round"
            stroke-width="2"
            d="M19 9l-7 7-7-7"></path>
        </svg>
      </button>
      <div
        id={contentId}
        class="accordion-content hidden p-4 border-t border-gray-200"
      >
        <p class="text-[#4B3621]">{answer}</p>
      </div>
    </div>

<script>
  document.addEventListener("DOMContentLoaded", () => {
    const headers = document.querySelectorAll(".accordion-header");

    headers.forEach((header) => {
      header.addEventListener("click", () => {
        const content = document.querySelector(
          header.getAttribute("data-target")
        );
        const icon = header.querySelector(".accordion-icon");

        // Close all accordions
        document
          .querySelectorAll(".accordion-content")
          .forEach((c) => c.classList.add("hidden"));
        document
          .querySelectorAll(".accordion-icon")
          .forEach((i) => i.classList.remove("rotate-180"));

        // Toggle the clicked accordion
        if (content.classList.contains("hidden")) {
          content.classList.remove("hidden");
          icon.classList.add("rotate-180");
        }
      });
    });
  });
</script>
